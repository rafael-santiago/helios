#
#                              Copyright (C) 2014 by Rafael Santiago
#
# This is free software. You can redistribute it and/or modify under
# the terms of the GNU General Public License version 2.
#
#
# "codeblocks_project_generator.hsl"
#       by Rafael Santiago
#
# In order to generate a codeblocks project file, being inside
# the output directory just call codeblocks_project_generator()
#                                                               ;-)
#

include ~/fsutil.hsl

function codeblocks_project_generator(project_name type string,
                                      bld_cmd_dbg type string,
                                      cln_cmd_dbg type string,
                                      rbld_cmd_dbg type string,
                                      bld_cmd_rel type string,
                                      cln_cmd_rel type string,
                                      rbld_cmd_rel type string) : result type int {
    var cbp_fp type file;
    var srcs type list;
    var src_filepath type string;
    var s type int;
    var parent_path type string;
    $cbp_fp = hefesto.sys.fopen($project_name + ".cbp", "wb");
    if ($cbp_fp == 0) {
        hefesto.sys.echo("codeblocks_project_generator ERROR: unable to create .cbp file.\n");
        result 0;
    }
    write_cbp_base_prologue($cbp_fp, $project_name, $bld_cmd_dbg, $cln_cmd_dbg, $rbld_cmd_dbg, $bld_cmd_rel, $cln_cmd_rel, $rbld_cmd_rel);
    $srcs = codeblocks_generator_find_sources(lsdir(), ".*\\.(c|cc|cpp|C|CC|CPP|h|H|Hpp|hpp|HPP)$");
    $parent_path = hefesto.sys.pwd();
    $s = 0;
    while ($s < $srcs.count()) {
        $src_filepath = $srcs.item($s);
        $src_filepath = codeblocks_get_relative_filepath($src_filepath);
        write_unit_to_cbp($cbp_fp, $src_filepath);
        $s = $s + 1;
    }
    write_cbp_base_epilogue($cbp_fp);
    hefesto.sys.fclose($cbp_fp);
    result 1;
}

local function codeblocks_get_relative_filepath(filepath type string) : result type string {
    var f type int;
    var cwd type string;
    var relative_filepath type string;
    $cwd = hefesto.sys.pwd();
    $f = $cwd.len() + 1;
    while ($f < $filepath.len()) {
        $relative_filepath = $relative_filepath + $filepath.at($f);
        $f = $f + 1;
    }
    result $relative_filepath;
}

local function codeblocks_generator_find_sources(cwd type list, regex type string) : result type list {
    var retval type list;
    var c type int;
    var tmp type string;
    var oldcwd type string;
    var dir_data type list;
    var d type int;
    var staged_ret type list;
    var subdir type list;
    var st type int;

    $oldcwd = hefesto.sys.pwd();

    $retval.ls($regex);

    $c = 0;
    while ($c < $cwd.count()) {
        $tmp = $cwd.item($c);
        hefesto.sys.cd($tmp);
        $dir_data.clear();
        $dir_data.ls(".*");
        $d = 0;
        while ($d < $dir_data.count()) {
            $tmp = $dir_data.item($d);
            if (isfile($tmp) == 1 && $tmp.match($regex) == 1) {
                if ($retval.index_of($tmp) == -1) {
                    $retval.add_item($tmp);
                }
            } else {
                if (hefesto.sys.cd($tmp) == 1) {
                    $staged_ret = codeblocks_generator_find_sources(lsdir(), $regex);
                    $st = 0;
                    while ($st < $staged_ret.count()) {
                        $tmp = $staged_ret.item($st);
                        if ($retval.index_of($tmp) == -1) {
                            $retval.add_item($tmp);
                        }
                        $st = $st + 1;
                    }
                }
            }
            $d = $d + 1;
        }
        $c = $c + 1;
    }

    hefesto.sys.cd($oldcwd);

    result $retval;
}

local function write_cbp_base_prologue(cbp_fp type file, project_title type string,
                                       bld_cmd_dbg type string, cln_cmd_dbg type string, rbld_cmd_dbg type string,
                                       bld_cmd_rel type string, cln_cmd_rel type string, rbld_cmd_rel type string) : result type none {
    var buffer type string;
    var b type int;
    var current_foldername type string;

    $buffer = hefesto.sys.pwd();

    $b = $buffer.len() - 1;

    if (hefesto.sys.os_name() == "windows") {
        $current_foldername = "\\";
    } else if (hefesto.sys.os_name() == "linux" ||
               hefesto.sys.os_name() == "freebsd") {
        $current_foldername = "/";
    }

    while ($b > 0 && $buffer.at($b) != $current_foldername) {
        $b = $b - 1;
    }

    $b = $b + 1;
    $current_foldername = "";
    while ($b < $buffer.len()) {
        $current_foldername = $current_foldername + $buffer.at($b);
        $b = $b + 1;
    }
    $buffer = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" ?>\n";
    hefesto.sys.fwrite($buffer, $buffer.len(), $cbp_fp);
    $buffer = "<CodeBlocks_project_file>\n";
    hefesto.sys.fwrite($buffer, $buffer.len(), $cbp_fp);
    $buffer = "\t<FileVersion major=\"1\" minor=\"6\" />\n\t<Project>\n";
    hefesto.sys.fwrite($buffer, $buffer.len(), $cbp_fp);
    $buffer = "\t\t<Option title=\"" + $project_title + "\" />\n";
    $buffer.replace("\\", "");
    $buffer.replace("/", "");
    $buffer.replace("\\.", "");
    hefesto.sys.fwrite($buffer, $buffer.len(), $cbp_fp);
    $buffer = "\t\t<Option makefile_is_custom=\"1\" />\n";
    hefesto.sys.fwrite($buffer, $buffer.len(), $cbp_fp);
    $buffer = "\t\t<Option pch_mode=\"2\" />\n";
    hefesto.sys.fwrite($buffer, $buffer.len(), $cbp_fp);
    $buffer = "\t\t<Option compiler=\"null\" />\n";
    hefesto.sys.fwrite($buffer, $buffer.len(), $cbp_fp);
    $buffer = "\t\t<Build>\n";
    hefesto.sys.fwrite($buffer, $buffer.len(), $cbp_fp);
    $buffer = "\t\t\t<Target title=\"Debug\">\n";
    hefesto.sys.fwrite($buffer, $buffer.len(), $cbp_fp);
    $buffer = "\t\t\t\t<Option output=\"" + hefesto.sys.make_path("bin/Debug/", $current_foldername) + "\" prefix_auto=\"1\" extension_auto=\"1\" />\n";
    hefesto.sys.fwrite($buffer, $buffer.len(), $cbp_fp);
    $buffer = "\t\t\t\t<Option object_output=\"obj/Debug/\" />\n";
    hefesto.sys.fwrite($buffer, $buffer.len(), $cbp_fp);
    $buffer = "\t\t\t\t<Option type=\"1\" />\n";
    hefesto.sys.fwrite($buffer, $buffer.len(), $cbp_fp);
    $buffer = "\t\t\t\t<Option compiler=\"null\" />\n";
    hefesto.sys.fwrite($buffer, $buffer.len(), $cbp_fp);
    $buffer = "\t\t\t\t<MakeCommands>\n";
    hefesto.sys.fwrite($buffer, $buffer.len(), $cbp_fp);
    $buffer = "\t\t\t\t\t<Build command=\"" + $bld_cmd_dbg + "\" />\n";
    hefesto.sys.fwrite($buffer, $buffer.len(), $cbp_fp);
    $buffer = "\t\t\t\t\t<Clean command=\"" + $cln_cmd_dbg + "\" />\n";
    hefesto.sys.fwrite($buffer, $buffer.len(), $cbp_fp);
    $buffer = "\t\t\t\t\t<AskRebuildNeeded command=\"" + $rbld_cmd_dbg + "\" />\n";
    hefesto.sys.fwrite($buffer, $buffer.len(), $cbp_fp);
    $buffer = "\t\t\t\t</MakeCommands>\n";
    hefesto.sys.fwrite($buffer, $buffer.len(), $cbp_fp);
    $buffer = "\t\t\t</Target>\n";
    hefesto.sys.fwrite($buffer, $buffer.len(), $cbp_fp);
    $buffer = "\t\t\t<Target title=\"Release\">\n";
    hefesto.sys.fwrite($buffer, $buffer.len(), $cbp_fp);
    $buffer = "\t\t\t\t<Option output=\"" + hefesto.sys.make_path("bin/Release/", $current_foldername) + "\" prefix_auto=\"1\" extension_auto=\"1\" />\n";
    hefesto.sys.fwrite($buffer, $buffer.len(), $cbp_fp);
    $buffer = "\t\t\t\t<Option object_output=\"obj/Release/\" />\n";
    hefesto.sys.fwrite($buffer, $buffer.len(), $cbp_fp);
    $buffer = "\t\t\t\t<Option type=\"1\" />\n";
    hefesto.sys.fwrite($buffer, $buffer.len(), $cbp_fp);
    $buffer = "\t\t\t\t<Option compiler=\"null\" />\n";
    hefesto.sys.fwrite($buffer, $buffer.len(), $cbp_fp);
    $buffer = "\t\t\t\t<MakeCommands>\n";
    hefesto.sys.fwrite($buffer, $buffer.len(), $cbp_fp);
    $buffer = "\t\t\t\t\t<Build command=\"" + $bld_cmd_rel + "\" />\n";
    hefesto.sys.fwrite($buffer, $buffer.len(), $cbp_fp);
    $buffer = "\t\t\t\t\t<Clean command=\"" + $cln_cmd_rel + "\" />\n";
    hefesto.sys.fwrite($buffer, $buffer.len(), $cbp_fp);
    $buffer = "\t\t\t\t\t<AskRebuildNeeded command=\"" + $rbld_cmd_rel + "\" />\n";
    hefesto.sys.fwrite($buffer, $buffer.len(), $cbp_fp);
    $buffer = "\t\t\t\t</MakeCommands>\n";
    hefesto.sys.fwrite($buffer, $buffer.len(), $cbp_fp);
    $buffer = "\t\t\t</Target>\n";
    hefesto.sys.fwrite($buffer, $buffer.len(), $cbp_fp);
    $buffer = "\t\t</Build>\n";
    hefesto.sys.fwrite($buffer, $buffer.len(), $cbp_fp);
}

local function write_cbp_base_epilogue(cbp_fp type file) : result type none {
    var buffer type string;
    $buffer = "\t\t<Extensions>\n\t\t\t<code_completion />\n\t\t\t<envvars />\n\t\t\t<debugger />\n\t\t\t<lib_finder disable_auto=\"1\" />\n\t\t</Extensions>\n";
    hefesto.sys.fwrite($buffer, $buffer.len(), $cbp_fp);
    $buffer = "\t</Project>\n</CodeBlocks_project_file>\n";
    hefesto.sys.fwrite($buffer, $buffer.len(), $cbp_fp);
}

local function write_unit_to_cbp(cbp_fp type file, src_filepath type string) : result type none {
    var buffer type string;
    $buffer = "\t\t<Unit filename=\""+ $src_filepath + "\">\n\t\t\t<Option compilerVar=\"CC\" />\n\t\t</Unit>\n";
    hefesto.sys.fwrite($buffer, $buffer.len(), $cbp_fp);
}
