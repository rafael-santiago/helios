#
#                              Copyright (C) 2014 by Rafael Santiago
#
# This is free software. You can redistribute it and/or modify under
# the terms of the GNU General Public License version 2.
#
#
# "vc_app_forge.hsl"
#       by Rafael Santiago
#
# Description: Visual C app forge.
#
# Relevant options for this forge:
#
#       --mk-pdb - generates the pdb file in release compilation model.
#       --compile-model=<debug|release> - indicates the compilation model (the default is release).
#       --link-model=<static|shared>    - indicates the link model (the default is static).
#       --cpu-arch=<arch> - (see more in "vcvarsall_110.hls" file comment header).
#       --obj-output-dir=<path> - indicates the output dir for the object files.
#       --bin-output-dir=<path> - indicates the output dir for the binary file.
#

include ~/toolsets/vc/vc110-app.hsl
include ~/toolsets/vc/forges/common/vcutils.hsl
include ~/toolsets/vc/vcvarsall/vcvarsall_110.hsl
include ~/fsutil.hsl
include ~/lsutil.hsl

function vc110_app_forge(sources type list, includepaths type list,
                         cflags type list, libpaths type list,
                         ldflags type list, appname type string) : result type int {
    var exit_code type int;
    $exit_code = 0;

    #
    # Try to detect the cpu architecture.
    #
    # If you need to specify an architecture use --cpu-arch=<arch> option.
    #

    $exit_code = vc110_vcvarsall("");

    if ($exit_code != 0) {
        hefesto.sys.echo(hefesto.project.toolset() + " critical error: unable to configure VC110 environment!\n");
        result $exit_code;
    }

    if ($sources.count() == 0) {
        $sources.ls(".*\\.(c|cc|cpp|CC|Cpp|CPP)$");
    }

    if ($sources.count() == 0) {
        hefesto.sys.echo(hefesto.project.toolset() + " ERROR: empty source list!\n");
        result 1;
    }

    var obj_output_dir type list;
    var obj_dir type string;

    $obj_output_dir = hefesto.sys.get_option("obj-output-dir");

    if ($obj_output_dir.count() > 0) {
        $obj_dir = $obj_output_dir.item(0);
        mktree($obj_dir);
    } else {
        $obj_dir = hefesto.sys.pwd();
    }

    var bin_output_dir type list;
    var bin_output type string;

    $bin_output_dir = hefesto.sys.get_option("bin-output-dir");

    if ($bin_output_dir.count() > 0) {
        $bin_output = $bin_output_dir.item(0);
        mktree($bin_output);
        $bin_output = hefesto.sys.make_path($bin_output, $appname);
    } else {
        $bin_output = $appname;
    }

    if ($sources.count() == 0) {
        hefesto.sys.echo(hefesto.project.toolset() + " critical error: no files to process!\n");
        result 1;
    }

    var isrelease type int;
    var compilemodel type list;

    $compilemodel = hefesto.sys.get_option("compile-model");
    if ($compilemodel.count() > 0) {
        if ($compilemodel.item(0) == "release") {
            $isrelease = 1;
        } else {
            if ($compilemodel.item(0) == "debug") {
                $isrelease = 0;
            } else {
                hefesto.sys.echo(hefesto.project.toolset() + " critical error: unknown compile-model, must be release or debug.\n");
                result 1;
            }
        }
    } else {
        $isrelease = 1;
    }

    var isstatic type int;
    var linkmodel type list;

    $linkmodel = hefesto.sys.get_option("link-model");
    if ($linkmodel.count() != 0) {
        if ($linkmodel.item(0) == "static") {
            $isstatic = 1;
        } else {
            if ($linkmodel.item(0) == "shared") {
                $isstatic = 0;
            } else {
                hefesto.sys.echo(hefesto.project.toolset() + " critical error: unknown link-model, must be static or shared.\n");
                result 1;
            }
        }
    } else {
        $isstatic = 1;
    }

    var includepaths_str type string;
    var libpaths_str type string;
    var ldflags_str type string;
    var cflags_str type string;

    $includepaths_str = vcincs2string($includepaths);
    $libpaths_str = vclibs2string($libpaths);
    $ldflags_str = vcflags2string($ldflags);
    $cflags_str = vcflags2string($cflags);

    var s type int;

    hefesto.sys.echo("*** Compiling... please wait...\n");

    # compiling...

    $s = 0;

    var qsize type list;
    var qsize_nr type int;

    $qsize = hefesto.sys.get_option("qsize");
    if ($qsize.count() > 0) {
        $qsize_nr = $qsize.item(0);
    } else {
        $qsize_nr = 1;
    }

    var curr_src_file type string;
    var not_compiled type list;
    var compilation_nr type int;

    $compilation_nr = 0;
    $not_compiled = lsdup($sources);

    if ($qsize_nr == 1) {
        while ($s < $sources.count() && $exit_code == 0) {
            $curr_src_file = $sources.item($s);
            if (vc_should_compile($curr_src_file) == 1) {
                $exit_code = vc_sync_compile_src($curr_src_file,
                                                 $includepaths_str,
                                                 $cflags_str,
                                                 $obj_dir,
                                                 $isrelease,
                                                 $isstatic);
                if ($exit_code == 0) {
                    $not_compiled.del_item($curr_src_file);
                    $compilation_nr = $compilation_nr + 1;
                    hefesto.sys.echo("\t" + $sources.item($s) + " is ok.\n");
                } else {
                    hefesto.sys.echo("\t" + $sources.item($s) + " has error(s).\n");
                }
            } else {
                hefesto.sys.echo("\t" + $sources.item($s) + " is updated.\n");
            }
            $s = $s + 1;
        }
        if ($compilation_nr > 0) {
            hefesto.toolset.base_refresh($not_compiled);
        }
    } else {
        $exit_code = vc_async_compile_srcs($sources,
                                           $includepaths_str,
                                           $cflags_str,
                                           $obj_dir,
                                           $isrelease,
                                           $isstatic);
    }

    if ($exit_code == 0) {
        hefesto.sys.echo("*** All sources were compiled.\n\n*** Linking...\n");
        if (isfile($appname) == 0 && $compilation_nr == 0) {
            $compilation_nr = 1;
        }
        if ($compilation_nr > 0) {
            # linking...
            $exit_code = vc_link_objects2app($sources,
                                             $obj_dir,
                                             $libpaths_str,
                                             $ldflags_str,
                                             $bin_output,
                                             $isrelease);
            if ($exit_code == 0) {
                hefesto.sys.echo("*** Link success (output:" + $bin_output + ")\n");
            } else {
                hefesto.sys.echo("*** Link error\n");
            }
        }
    } else {
        hefesto.sys.echo("*** Errors were found.\n");
    }

    result $exit_code;
}

function vc_link_objects2app(sources type list, obj_dir type string,
                             libs type string,
                             ldflags type string, appname type string,
                             isrelease type int) : result type int {
    var cmd type string;
    var objects type string;
    var mkpdb type list;
    $objects = vc_objs_from_srcs($sources, $obj_dir);
    $mkpdb = hefesto.sys.get_option("mk-pdb");
    if ($isrelease == 1 && $mkpdb.count() == 0) {
        $cmd = hefesto.toolset.link_release($appname, $objects, $libs, $ldflags);
    } else {
        if ($mkpdb.count() > 0 && $isrelease == 0) {
            hefesto.sys.echo(hefesto.project.toolset() + " warning: --mkpdb option is irrelevant in compile model debug.\n");
        }
        $cmd = hefesto.toolset.link_debug($appname, $objects, $libs, $ldflags);
    }
    result hefesto.sys.run($cmd);
}
