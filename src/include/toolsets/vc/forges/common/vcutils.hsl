#
#                              Copyright (C) 2014 by Rafael Santiago
#
# This is free software. You can redistribute it and/or modify under
# the terms of the GNU General Public License version 2.
#
#
# "vcutils.hsl"
#       by Rafael Santiago
#
# Description: Some common utilities to be used in all vc's toolsets.
#

include ~/fsutil.hsl
include ~/lsutil.hsl

function vc_get_filename(artifact type string) : result type string {
    var al type int;
    var a type int;

    $al = $artifact.len() - 1;

    while ($al > 0 && $artifact.at($al) != ".") $al = $al - 1;

    var return type string;

    $a = 0;
    $return = "";

    while ($a < $al) {
        $return = $return + $artifact.at($a);
        $a = $a + 1;
    }

    result $return;
}

function vc_should_compile(srcfile type string) : result type int {
    var objfile type string;
    var should type int;
    $objfile = vc_get_filename($srcfile) + ".obj";
    $should = hefesto.toolset.file_has_change($srcfile) || (isfile($objfile) == 0);
    result $should;
}

function vc_mk_compile_cmd(source type string, incs type string,
                           cflags type string, obj_dir type string,
                           isrelease type int, 
                           isstatic type int) : result type string {
    var cmd type string;
    var object type string;

    $object = filenamewnoext(filenamefrompath($source)) + ".obj";
    $object = hefesto.sys.make_path($obj_dir, $object);

    if ($isrelease == 1) {
        if ($isstatic == 1) {
            $cmd = hefesto.toolset.compile_release_static($source, $object, $incs, $cflags);
        } else {
            $cmd = hefesto.toolset.compile_release_shared($source, $object, $incs, $cflags);
        }
    } else {
        if ($isstatic == 1) {
            $cmd = hefesto.toolset.compile_debug_static($source, $object, $incs, $cflags);
        } else {
            $cmd = hefesto.toolset.compile_debug_shared($source, $object, $incs, $cflags);
        }
    }

    result $cmd;
}

function vc_sync_compile_src(source type string, incs type string,
                             cflags type string, obj_dir type string,
                             isrelease type int,
                             isstatic type int) : result type int {
    var cmd type string;
    $cmd = vc_mk_compile_cmd($source, $incs, $cflags, $obj_dir,
                             $isrelease, $isstatic);
    result hefesto.sys.run($cmd);
}

function vc_async_compile_srcs(sources type list, incs type string,
                               cflags type string, obj_dir type string,
                               isrelease type int,
                               isstatic type int) : result type int {
    var cmds type list;
    var cmd type string;
    var s type int;
    var qsize type list;
    var qsize_nr type int;
    var q type int;
    var exit_code type int;
    var curr_src_file type string;

    $qsize = hefesto.sys.get_option("qsize");
    if ($qsize.count() > 0) {
        $qsize_nr = $qsize.item(0);
    } else {
        $qsize_nr = 1;
    }

    $exit_code = 0;

    $s = 0;

    var not_compiled type list;
    var aux_compiled type list;
    var compilation_nr type int;

    $compilation_nr = 0;
    $not_compiled = lsdup($sources);

    while ($s < $sources.count() && $exit_code == 0) {
        $cmds.clear();
        $q = 0;
        $aux_compiled.clear();
        while ($q < $qsize_nr && $s < $sources.count()) {
            $curr_src_file = $sources.item($s);
            if (vc_should_compile($curr_src_file) == 1) {
                $cmd = vc_mk_compile_cmd($curr_src_file, $incs, $cflags, $obj_dir,
                                         $isrelease, $isstatic);
                $cmds.add_item($cmd);
                $aux_compiled.add_item($curr_src_file);
            }
            $q = $q + 1;
            $s = $s + 1;
        }
        if ($cmds.count() > 0) {
            $exit_code = hefesto.sys.run($cmds);
            if ($exit_code == 0) {
                $q = 0;
                $compilation_nr = $compilation_nr + $aux_compiled.count();
                while ($q < $aux_compiled.count()) {
                    $curr_src_file = $aux_compiled.item($q);
                    $not_compiled.del_item($curr_src_file);
                    $q = $q + 1;
                }
            }
        }
    }

    if ($compilation_nr > 0) {
        hefesto.toolset.base_refresh($not_compiled);
    }

    result $exit_code;
}

function vc_objs_from_srcs(srcs type list,
                           obj_dir type string) : result type string {
    var objname type string;
    var obj_str_list type string;
    var s type int;

    $obj_str_list = "";

    $s = 0;
    while ($s < $srcs.count()) {
        $objname = $srcs.item($s);
        $objname = filenamewnoext(filenamefrompath($objname)) + ".obj";
        $objname = hefesto.sys.make_path($obj_dir, $objname);
        $obj_str_list = $obj_str_list + $objname + " ";
        $s = $s + 1;
    }

    result $obj_str_list;
}

function vcincs2string(includepaths type list) : result type string
{
    var i type int;
    var incs type string;
    $i = 0;
    $incs = "";
    while ($i < $includepaths.count()) {
        $incs = $incs + "/I \"" + $includepaths.item($i) + "\" ";
        $i = $i + 1;
    }
    result $incs;
}

function vclibs2string(libpaths type list) : result type string
{
    var l type int;
    var libs type string;
    $l = 0;
    $libs = "";
    while ($l < $libpaths.count()) {
        $libs = $libs + "/LIBPATH:\"" + $libpaths.item($l) + "\" ";
        $l = $l + 1;
    }
    result $libs;
}

function vcflags2string(flags type list) : result type string
{
    var f type int;
    var s_flags type string;
    $f = 0;
    while ($f < $flags.count()) {
        $s_flags = $s_flags + $flags.item($f) + " ";
        $f = $f + 1;
    }
    result $s_flags;
}
