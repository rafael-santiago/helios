#
# "ffmpeg_forge.hsl"
#

function validate_ffmpeg_task(task type string) : result type int
{
    var valid_tasks type list;

    $valid_tasks.add_item("mp4conversor");
    $valid_tasks.add_item("ipodencoder");
    $valid_tasks.add_item("avi2gif");
    $valid_tasks.add_item("mp3fromvid");
    $valid_tasks.add_item("flv2mp4");

    var retval type int;

    $retval = ($valid_tasks.index_of($task) > -1);

    result $retval;
}

function mk_output_filename(input_filename type string, ffmpeg_task type string) : result type string
{
    var extension type string;

    if ($ffmpeg_task == "mp4conversor" ||
        $ffmpeg_task == "ipodencoder"  ||
	$ffmpeg_task == "flv2mp4") {
        $extension = ".mp4";
    } else if ($ffmpeg_task == "avi2gif") {
        $extension = ".gif";
    } else if ($ffmpeg_task == "mp3fromvid") {
        $extension = ".mp3";
    }

    var retval type string;
    var should_add_quote type int;

    $retval = $input_filename;
    $should_add_quote = $retval.match(".*\"$");
    $retval.replace("\\..*$", $extension);

    if ($should_add_quote) {
        $retval = $retval + "\"";
    }

    result $retval;
}

function mk_ffmpeg_command(input type string, output type string, task type string) : result type string
{
    var retval type string;
    var additional_option type list;
    var option_value type string;

    if ($task == "mp4conversor") {
        $retval = hefesto.toolset.mp4conversor($input, $output);
    } else if ($task == "ipodencoder") {
        $retval = hefesto.toolset.ipodencoder($input, $output);
    } else if ($task == "avi2gif") {
        $retval = hefesto.toolset.avi2gif($input, $output);
    } else if ($task == "mp3fromvid") {
        $retval = hefesto.toolset.mp3fromvid($input, $output);
    } else if ($task == "flv2mp4") {
        $additional_option = hefesto.sys.get_option("crf");
	if ($additional_option.count() > 0) {
	    $option_value = $additional_option.item(0);
	    $retval = hefesto.toolset.flv2mp4wcrf($input, $output, $option_value);
	} else {
	    $retval = hefesto.toolset.flv2mp4($input, $output);
	}
    }

    result $retval;
}

function ffmpeg_forge(input type list, output type list) : result type int
{
    if ($input.count() == 0) {
        hefesto.sys.echo(hefesto.project.toolset() + ": ERROR: input underflow!\n");
        result 1;
    }

    var ffmpeg_task type list;

    $ffmpeg_task = hefesto.sys.get_option("ffmpeg-task");

    if ($ffmpeg_task.count() == 0) {
        hefesto.sys.echo(hefesto.project.toolset() + ": ERROR: ffmpeg-task not informed!\n");
        result 1;
    }

    var ffmpeg_task_label type string;

    $ffmpeg_task_label = $ffmpeg_task.item(0);

    if (validate_ffmpeg_task($ffmpeg_task_label) == 0) {
        hefesto.sys.echo(hefesto.project.toolset() + ": ERROR: unknown ffmpeg-task!\n");
        result 1;
    }

    var input_index type int;

    $input_index = 0;

    if ($input.count() < $output.count()) {
        var temp type string;
        $input_index = $output.count() - 1;
        while ($input_index < $input.count()) {
            $temp = $input.item($input_index);
            $temp = mk_output_filename($temp, $ffmpeg_task_label);
            $output.add_item($temp);
        }
        $input_index = 0;
    }

    var input_filename type string;
    var output_filename type string;
    var ffmpeg_command type string;

    var exit_code type int;

    $exit_code = 0;

    while ($input_index < $input.count() && $exit_code == 0) {
        $input_filename = $input.item($input_index);
        $output_filename = $output.item($input_index);

        $ffmpeg_command = mk_ffmpeg_command($input_filename, $output_filename, $ffmpeg_task_label);

        $exit_code = hefesto.sys.run($ffmpeg_command);

        $input_index = $input_index + 1;
    }

    result $exit_code;
}
