#                                                Wed 28 Nov 2012 06:26:49 PM BRST
#
#                              Copyright (C) 2013 by Rafael Santiago
#
# This is free software. You can redistribute it and/or modify under
# the terms of the GNU General Public License version 2.
#
#  "gcc_c_app_forge.hsl"
#        by Rafael Santiago
#
# Description:
# ------------
# GCC compilation/build routines.
#
#       Relevant command line options to interact with this piece of code:
#
#       --forge-anyway: forces to build anything involved in process.
#       --qsize=<number>: number of paralel compilation tasks.
#       --compile-model=<release|debug>: select for release or debug.
#                                        (the default is release)
#       --link-model=<static|shared>: select for shared or static.
#                                     (the default is shared)
#       --ldflags=<linker flags>: flags that must be passed to linker.
#       --obj-output-dir=<path> - indicates the output dir for the object
#                                 files.
#       --bin-output-dir=<path> - indicates the output dir for the binary
#                                 file.
#       --cpu-arch=<32|64>      - specifies the target architecture.
#
# FINAL USERS, WARNING:
# --------------------
# Don't call any function here directly. Use the toolsets that use these
# functions instead.
#

include ~/toolsets/gcc/forges/common.hsl
include ~/toolsets/gcc/forges/win_common.hsl
include ~/fsutil.hsl
include ~/lsutil.hsl

var gcc_c_app_project_forge_dirty_files_nr type int;

local function gcc_mk_app_compilation_command(src_name type string,
                                              outfile type string,
                                              includes type string,
                                              cflags type string,
                                              is_release type int) : result type string {
    var cmd type string;
    if ($is_release == 1) {
        $cmd = hefesto.toolset.compile_r($src_name, $outfile, $includes, $cflags);
    } else {
        $cmd = hefesto.toolset.compile_d($src_name, $outfile, $includes, $cflags);
    }
    result $cmd;
}

function gcc_app_compile_source_list(sources type list, includes type string, cflags type string, obj_dir type string) : result type int {
    var size type int;
    var i type int;
    var j type int;
    var exit_code type int;
    var ofile type string;
    var qsize_list type list;
    var run_list type list;
    var qsize type int;
    var not_compiled type list;
    var not_compiled_tmp type list;
    var compile_model type list;
    var is_release type int;
    var curr_src_file type string;

    $size = $sources.count();

    if ($size == 0) result 0;

    $qsize_list = hefesto.sys.get_option("qsize");

    if ($qsize_list.count() > 0) {
        $qsize = $qsize_list.item(0);
    }

    var coverage type list;
    $coverage = hefesto.sys.get_option("coverage");

    $compile_model = hefesto.sys.get_option("compile-model");
    $is_release = ($coverage.count() == 0);

    if ($compile_model.count() > 0) {
        if ($compile_model.item(0) != "release" &&
            $compile_model.item(0) != "debug") {
            hefesto.sys.echo(hefesto.project.toolset() + " internal error: unknown compile model: \"" + $compile_model.item(0) + "\"\n");
            result 1;
        }
        $is_release = ($is_release == 1 && $compile_model.item(0) == "release");
    }

    $exit_code = 0;
    $i = 0;

    $gcc_c_app_project_forge_dirty_files_nr = 0;

    $not_compiled = lsdup($sources);

    if ($qsize <= 1) {
        while ($i < $size && $exit_code == 0) {
            $ofile = $sources.item($i);
            $ofile = gcc_mk_ofile_name(filenamefrompath($ofile), $obj_dir);
            if ($coverage.count() > 0 || hefesto.toolset.file_has_change($sources.item($i)) == 1 || isfile($ofile) == 0) {
                $gcc_c_app_project_forge_dirty_files_nr = $gcc_c_app_project_forge_dirty_files_nr + 1;
                $curr_src_file = "\"" + $sources.item($i) + "\"";
                $exit_code = hefesto.sys.run(gcc_mk_app_compilation_command($curr_src_file, $ofile, $includes, $cflags, $is_release));
                if ($exit_code == 0) {
                    $not_compiled.del_item($sources.item($i));
                    hefesto.sys.echo("\t*** " + $sources.item($i) + ": no errors found.\n");
                } else {
                    hefesto.sys.echo("\t*** " + $sources.item($i) + ": errors found!\n");
                }
            } else {
                hefesto.sys.echo("\t*** " + $sources.item($i) + ": no changes.\n");
            }
            $i = $i + 1;
        }
        if ($gcc_c_app_project_forge_dirty_files_nr > 0) {
            hefesto.toolset.base_refresh($not_compiled);
        }
    } else {
        $not_compiled_tmp.clear();
        while ($i < $size) {
            $ofile = $sources.item($i);
            $ofile = gcc_mk_ofile_name(filenamefrompath($ofile), $obj_dir);
            if ($coverage.count() > 0 || hefesto.toolset.file_has_change($sources.item($i)) == 1 || isfile($ofile) == 0) {
                $gcc_c_app_project_forge_dirty_files_nr = $gcc_c_app_project_forge_dirty_files_nr + 1;
                $curr_src_file = "\"" + $sources.item($i) + "\"";
                $run_list.add_item(gcc_mk_app_compilation_command($curr_src_file, $ofile, $includes, $cflags, $is_release));
                $not_compiled_tmp.add_item($sources.item($i));
            }
            if ($run_list.count() == $qsize) {
                $exit_code = hefesto.sys.run($run_list);
                if ($exit_code == 0) {
                    $j = 0;
                    while ($j < $not_compiled_tmp.count()) {
                        $not_compiled.del_item($not_compiled_tmp.item($j));
                        $j = $j + 1;
                    }
                    $not_compiled_tmp.clear();
                    hefesto.toolset.base_refresh($not_compiled);
                }
                $run_list.clear();
            }
            $i = $i + 1;
        }
        if($run_list.count() > 0) {
            $exit_code = hefesto.sys.run($run_list);
            if ($exit_code == 0) {
                    $j = 0;
                while ($j < $not_compiled_tmp.count()) {
                    $not_compiled.del_item($not_compiled_tmp.item($j));
                    $j = $j + 1;
                }
                hefesto.toolset.base_refresh($not_compiled);
            }
        }
    }
    result $exit_code;
}

function gcc_link_ofiles(objects type string, libraries type string, ldflags type string, appname type string) : result type int {
    var exit_code type int;
    var link_model type list;
    var is_static type int;
    $link_model = hefesto.sys.get_option("link-model");
    $is_static = 0;
    if ($link_model.count() > 0) {
        if ($link_model.item(0) == "static") {
            $is_static = 1;
        } else {
            if ($link_model.item(0) != "shared") {
                hefesto.sys.echo(hefesto.project.toolset() + " internal error: unknown link model: \"" + $link_model.item(0) + "\"\n");
                result 1;
            }
        }
    }
    if (hefesto.sys.os_name() == "windows") {
        $exit_code = gcc_windres_ofiles($objects);
        if ($exit_code != 0) {
            result $exit_code;
        }
    }
    if ($is_static == 1) {
        $exit_code = hefesto.sys.run(hefesto.toolset.link_static($appname, $objects, $libraries, $ldflags));
    } else {
        $exit_code = hefesto.sys.run(hefesto.toolset.link_shared($appname, $objects, $libraries, $ldflags));
    }
    result $exit_code;
}

function gcc_c_binary_forge(SOURCES type list, INCLUDES type list, CFLAGS type list,
                             LIBRARIES type list, LDFLAGS type list, APPNAME type string) : result type int {
    var exit_code type int;
    var includes type string;
    var cflags type string;
    var libraries type string;
    var ldflags type string;
    var objects type string;

    if ($SOURCES.count() == 0) {
        if (hefesto.project.toolset() == "gcc-c-app") {
            $SOURCES.ls(".*\\.c$");
        } else {
            $SOURCES.ls(".*\\.(cc|cpp|CC|Cpp|CPP)$");
        }
    }

    if ($SOURCES.count() == 0) {
        hefesto.sys.echo("\t(empty source list)\n");
        result 1;
    }

    var obj_output_dir type list;
    var obj_dir type string;

    $obj_output_dir = hefesto.sys.get_option("obj-output-dir");
    if ($obj_output_dir.count() > 0) {
        $obj_dir = $obj_output_dir.item(0);
        mktree($obj_dir);
    } else {
        $obj_dir = hefesto.sys.pwd();
    }

    var bin_output_dir type list;
    var bin_output type string;

    $bin_output_dir = hefesto.sys.get_option("bin-output-dir");
    if ($bin_output_dir.count() > 0) {
        $bin_output = $bin_output_dir.item(0);
        mktree($bin_output);
        $bin_output = hefesto.sys.make_path($bin_output, $APPNAME);
    } else {
        $bin_output = $APPNAME;
    }

    $exit_code = 0;

    $includes = gcc_mk_gcc_incl_str_opt($INCLUDES); #  GCC's include list option string

    var coverage type list;
    $coverage = hefesto.sys.get_option("coverage");
    if ($coverage.count() > 0) {
        $CFLAGS.add_item("--coverage");
        $LDFLAGS.add_item("--coverage");
    }

    $cflags = gcc_mk_raw_str_opt($CFLAGS); #  GCC's compile options 

    var cpu_arch type list;
    var chosen_arch type string;
    $cpu_arch = hefesto.sys.get_option("cpu-arch");
    $chosen_arch = "";
    if ($cpu_arch.count() > 0) {
        $chosen_arch = $cpu_arch.item(0);
        if ($chosen_arch != "32" && $chosen_arch != "64") {
            hefesto.sys.echo(hefesto.project.toolset() + " fatal error: invalid value for cpu-arch option must be '32' or '64'.\n");
            result 1;
        }
        $cflags = $cflags + " -m" + $chosen_arch;
    }

    #  compiling...
    hefesto.sys.echo("*** compiling...\n");

    $exit_code = gcc_app_compile_source_list($SOURCES, $includes, $cflags, $obj_dir);
    if ($gcc_c_app_project_forge_dirty_files_nr == 0 && isfile($bin_output) == 0) {
        $gcc_c_app_project_forge_dirty_files_nr = 1;
    }

    if ($gcc_c_app_project_forge_dirty_files_nr > 0 && $exit_code == 0) {
        $objects = gcc_mk_ofiles_str_opt($SOURCES, $obj_dir);
        $ldflags = gcc_mk_raw_str_opt($LDFLAGS);
        if ($chosen_arch.len() > 0) {
            $ldflags = $ldflags + "-m" + $chosen_arch;
        }
        $libraries = gcc_mk_gcc_lib_str_opt($LIBRARIES);
        #  linking...
        hefesto.sys.echo("*** now linking...\n\t*** waiting...\n");
        $exit_code = gcc_link_ofiles($objects, $libraries, $ldflags, $bin_output);
    }

    if ($exit_code == 0) {
        hefesto.sys.echo("*** success.\n");
    } else {
        hefesto.sys.echo("*** failure.\n");
    }

    result $exit_code;
}
