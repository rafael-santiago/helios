#                                              Wed 21 Nov 2012 09:35:31 PM BRST
#
#                              Copyright (C) 2013 by Rafael Santiago
#
# This is free software. You can redistribute it and/or modify under
# the terms of the GNU General Public License version 2.
#
# "dependency_scanner.hsl"
#       by Rafael Santiago
#
# Description:
# ------------
#       This  file  implements  the  dependency  scanner  for  C/C++  projects.
#       File  extensions  h,  hpp,  c,  cc,  cpp will be searched. This scanner
#       tries   to   detect   an   indirect   dependency   too,   for  example:
#
#       If  project  A depends of foo.h which is a file of project B, project A
#       will  depends  of  foo.c  or  foo.cc or foo.cpp if this files exists in
#       project  B  (on the same path of foo.h in this case [this is the rule]).
#
#       To use this dependency scanner in your Forgefile: on preloading(), store
#       the  result of get_project_dependencies() in a string variable, then use
#       this  string in section dependencies on Forgefile's project declaration.
#
# Sun 05 Jan 2014 07:37:19 PM BRST:
#
#       Now you must to use *** get_c_cpp_deps() *** all the other functions in
#       this file were deprecated and you shouldn't use these anymore.
#
#       -- rs
#

include ~/fsutil.hsl

function get_c_cpp_deps() : result type string { # A faster dependency scanner.
    var files type list;
    var includes type list;
    var f type int;
    var i type int;
    var dep_chain type string;
    var str type string;
    var cwd type string;
    var exts type list;
    var e type int;
    var dep_nr type int;
    var related_files type list;

    $e = 0;

    $exts.add_item("h");
    $exts.add_item("hpp");
    $exts.add_item("c");
    $exts.add_item("C");
    $exts.add_item("CC");
    $exts.add_item("cc");
    $exts.add_item("cpp");
    $exts.add_item("CPP");

    while ($e < $exts.count()) {
        $str = ".*\\." + $exts.item($e) + "$";
        $files.ls($str);
        $f = 0;
        $cwd = hefesto.sys.pwd();
        while ($f < $files.count()) {
#            hefesto.sys.echo("NOW SCANNING = " + $files.item($f) + "\n");
            $str = $files.item($f);
#            $dep_chain = $dep_chain + filenamefrompath($str) + ": ";
            $dep_chain = $dep_chain + $str + ": ";
            $includes = hefesto.sys.lines_from_file($str, "#include.*$");
            $i = 0;
            $dep_nr = 0;
            while ($i < $includes.count()) {
                $str = $includes.item($i);
                $str.replace(".*#include.*(\"|<)", "");
                $str.replace("(\"|>)$", "");
#                hefesto.sys.echo("STR = " + $str + "\n");
                if (islocalinclude($str) == 1) {
#                    hefesto.sys.echo("LOCALINCLUDE = " + $str + "\n");
#                    $str = hefesto.sys.make_path($cwd, $str);
                    if ($dep_nr > 0) {
                        $dep_chain = $dep_chain + "& ";
                    }
                    $dep_chain = $dep_chain + $str + " ";
                    $dep_nr = $dep_nr + 1;
                }
                $i = $i + 1;
            }
#            hefesto.sys.echo("DEP = " + $dep_chain + "\n");
            if ($exts.item($e) == "h" || $exts.item($e) == "hpp") {
                $str = $files.item($f);
                $str = filenamefrompath($str);
                $str.replace("\\.(h|hpp)$", "");
#                hefesto.sys.echo("REGEX: " + ".*" + $str + "\\.(c|C|CC|cc|cpp)$\n");
                $related_files.clear();
                $related_files.ls(".*" + filenamefrompath($str) + "\\.(c|C|CC|cc|cpp|CPP)$");
                if ($related_files.count() > 0) {
                    $i = 0;
                    while ($i < $related_files.count()) {
                        if ($dep_nr > 0) {
                            $dep_chain = $dep_chain + "& ";
                        }
#                        hefesto.sys.echo("RELATED FILE: " + $related_files.item($i) + "\n");
                        $dep_chain = $dep_chain + $related_files.item($i) + " ";
                        $dep_nr = $dep_nr + 1;
                        $i = $i + 1;
                    }
                }
            }
            if ($dep_nr > 0) {
                $dep_chain = $dep_chain + "& ";
            }
            $dep_chain = $dep_chain + hefesto.project.file_path() + ";\n";
            $f = $f + 1;
        }
        $files.clear();
        $e = $e + 1;
    }
    result $dep_chain;
}

function islocalinclude(basepath type string) : result type int {
    var src_root type string;
    var temp type string;
    if (isfile($basepath) == 1) {
        result 1;
    }
    $src_root = hefesto.sys.env("GET_C_CPP_DEPS_SRC_ROOT");
    if ($src_root.len() == 0) {
        result 0;
    }
    $temp = hefesto.sys.make_path($src_root, $basepath);
#    hefesto.sys.echo("TEMP = " + $temp + "\n");
    if (isfile($temp) == 1) {
        hefesto.sys.byref($basepath);
        result 1;
    }
    result 0;
}

# ---------------------- DEPRECATED THINGS ----------------------------

function get_project_dependencies() : result type string { # deprecated
    var prj_files type list;
    var prj_files_sz type int;
    var curr_file type string;
    var p type int;
    var continue_scan type int;

    #  getting all files which must be scanned.
    $prj_files.ls("\\.(h|hpp|c|cc|cpp)$");

    $p = 0;
    $continue_scan = 1;
    while ($continue_scan) {
        while ($p < $prj_files_sz) {
            $curr_file = $prj_files.item($p);
            $prj_files = get_includes_from_file($curr_file, $prj_files);
            $p = $p + 1;
        }
        $prj_files_sz = $prj_files.count();
        if ($p == $prj_files_sz) {
            $continue_scan = 0;
        }
    }

    #  getting individual dependencies of a file 
    #  and build the dep chain for it.

    var dep_chain type string;
    var file_deps type list;
    var file_deps_sz type int;
    var f type int;
    var filename type string;

    $p = 0;
    while ($p < $prj_files_sz) {
        $curr_file = $prj_files.item($p);
        $file_deps = get_includes_from_file($curr_file, $file_deps);
        $file_deps_sz = $file_deps.count();
        if ($file_deps_sz > 0) {
            $dep_chain = $dep_chain + $curr_file + ": ";
            $f = 0;
            while ($f < $file_deps_sz) {
                $filename = $file_deps.item($f);
                $dep_chain = $dep_chain + $filename;
                $f = $f + 1;
                if ($f < $file_deps_sz) {
                    $dep_chain = $dep_chain + " & ";
                } else {
                    $dep_chain = $dep_chain + " ;\n";
                }
            }
        }
        $p = $p + 1;
        $file_deps.clear();
    }

    result $dep_chain;
}

function get_includes_from_file(filepath type string, includes type list) : result type list { # deprecated
    var fd type file;
    var include_name type string;
    var b type string;
    var inc_paths type list;
    #
    # XXX(Santiago): this code is too much deep,
    #                       need to be improved.
    $inc_paths = hefesto.sys.get_option("includes");
    $fd = hefesto.sys.fopen($filepath, "r");
    if ($fd != 0) {
        while (hefesto.sys.feof($fd) != 1) {
            hefesto.sys.fread($b, 1, $fd);
            if ($b == "#") {
                hefesto.sys.fread($b, 7, $fd);
                if ($b == "include") {
                    hefesto.sys.fread($b, 1, $fd);
                    while ($b == " " || $b == "\t") {
                        while ($b == " " || $b == "\t") {
                            hefesto.sys.fread($b, 1, $fd);
                        }
                        if ($b == "<" || $b == "\"") {
                            hefesto.sys.fread($b, 1, $fd);
                        }
                    }
                    $include_name = $b;
                    hefesto.sys.fread($b, 1, $fd);
                    while ($b != ">" && $b != "\"" && hefesto.sys.feof($fd) != 1) {
                        $include_name = $include_name + $b;
                        hefesto.sys.fread($b, 1, $fd);
                    }
                    $include_name = get_include_fullpath($include_name, $inc_paths);
                    if ($include_name != "" && $includes.index_of($include_name) == -1) {
                        $includes.add_item($include_name);
                        if (is_header_file($include_name) == 1) { #  looking for indirect dependencies
                            var imp_files type list;
                            var i type int;
                            var i_sz type int;
                            var imp_filename type string;
                            $imp_files = get_imp_filenames_from_header_filename($include_name);
                            $i_sz = $imp_files.count();
                            $i = 0;
                            while ($i < $i_sz) {
                                $imp_filename = $imp_files.item($i);
                                if ($includes.index_of($imp_filename) == -1) {
                                    $includes.add_item($imp_filename);
                                }
                                $i = $i + 1;
                            }
                        }
                    }
                }
            }
        }
    }
    result $includes;
}

function fexists(filepath type string) : result type int { # deprecated
    var fd type file;
    $fd = hefesto.sys.fopen($filepath, "r");
    if ($fd != 0) {
        hefesto.sys.fclose($fd);
        result 1;
    }
    result 0;
}

function get_include_fullpath(include_filename type string, includes_search_paths type list) : result type string { # deprecated
    var inc_sz type int;
    var i type int;
    var fullpath type string;
    var fd type file;

    if (fexists($include_filename) == 1) {
        result $include_filename;
    }
    $inc_sz = $includes_search_paths.count();
    $i = 0;
    while ($i < $inc_sz) {
        $fullpath = hefesto.sys.make_path($includes_search_paths.item($i), $include_filename);
        $fd = hefesto.sys.fopen($fullpath, "r");
        if ($fd != 0) {
            hefesto.sys.fclose($fd);
            result $fullpath; 
        }
        $i = $i + 1;
    }
    result "";
}

function get_file_extension(filepath type string) : result type string { # deprecated
    var return type string;
    var f type int;
    var fs type int;
    $return = "";
    $fs = $filepath.len();
    $f = $fs;
    while ($f > 0 && $filepath.at($f) != ".") {
        $f = $f - 1;
    }
    if ($f > 0) {
        $f = $f + 1;
        while ($f < $fs) {
            $return = $return + $filepath.at($f);
            $f = $f + 1;
        }
    }
    result $return;
}

function is_header_file(filepath type string) : result type int { # deprecated
    var ext type string;
    $ext = get_file_extension($filepath);
    if ($ext == "h" || $ext == "hpp") result 1;
    result 0;
}

function get_imp_filenames_from_header_filename(filepath type string) : result type list { # deprecated
    var imp_filenames type list;
    var f type int;
    var fs type int;
    $fs = $filepath.len();
    while ($fs > 0 && $filepath.at($fs) != ".") {
        $fs = $fs - 1;
    }
    if ($fs > 0) {
        var fname type string;
        $f = 0;
        while ($f <= $fs) {
            $fname = $fname + $filepath.at($f);
            $f = $f + 1;
        }
        var temp type string;
        if (fexists($fname + "c") == 1) {
            $imp_filenames.add_item($fname + "c");
        }
        if (fexists($fname + "cc") == 1) {
            $imp_filenames.add_item($fname + "cc");
        }
        if (fexists($fname + "cpp") == 1) {
            $imp_filenames.add_item($fname + "cpp");
        }
    }
    result $imp_filenames;
}
